#version 330 core

uniform sampler2D texSampler;
in vec2 UV;
out vec4 color;

const float pi = 3.14159265359;
const float a90 = pi / 2.0;
const float a2rad = pi / 180.0;

// 10 geometric parameters (all(?) variable) + 5 output variables
// Mirror & Projector
uniform float R;   // equatorial radius of 1/4 sphere mirror (polar radius is R*b/a)
uniform float v;   // projector horiz distance from mirror center in tilted-table plane
const float beam = $(BEAM) * a2rad;  // projector opening angle (horizontal)
const float ar = $(ASPECT);  // projector aspect ratio
const float alpha = $(ALPHA) * a2rad;  // tilt, positive if mirror is higher than projector
uniform float beta;   // angle between tilted table and bottom row of pixels
uniform float ba;  // b/a, the axial ratio for the oblate spheroid
// Dome:
uniform float M; // meters.  Radial distance of mirror center to dome center
uniform float H;    // meters. gap from bottom of dome to mirror center

uniform bool renderWarp; // Whether it should display warp information instead of applying warp

const float S = $(DOME_RADIUS);  // meters. dome radius 
// Output:
const float phaseangle = $(PHASE_ANGLE) * a2rad;    // I /think/ this is correct

// derived parameters
const float gamma = beam / ar;   // projector vertical opening angle

// 3 functions to deal with oblate coordinate system
// returns cartesian coords given oblate coords
vec3 cartesian(in float a, in float mu, in float nu, in float phi)
{
    vec3 rv = vec3(0, 0, 0);
    rv.x = a*cosh(mu)*cos(nu)*cos(phi);
    rv.y = a*cosh(mu)*cos(nu)*sin(phi);
    rv.z = a*sinh(mu)*sin(nu);
    return rv;
}

// returns oblate coords given cartesian coords
void oblate(in float a, in float x, in float y, in float z, out float mu, out float nu, out float phi)
{
    phi = atan(y,x);
    float rho = sqrt(x*x + y*y);
    float d1 = sqrt( pow(rho + a,2) +z*z);
    float d2 = sqrt( pow(rho - a,2) +z*z);
	float x9 = (d1+d2)/(2.0*a);
	if ( x9 < 1.0 ) { x9 = 1.0; }  // and also print an error message?
    mu = acosh( x9 );

	float x8 = (d1-d2)/(2.0*a);
	if (x8 > 1.00) {x8 = 1.0;}  // this can happen due to roundoff error, and breaks acos
    nu = acos( x8 );
	if (nu*z < 0.0)	{ nu = -1.0 * nu; } // make nu's sign agree with z's
}

// returns a cartesian vector that is local to the oblate spheroid surface
vec3 onormal(in float mu, in float nu, in float phi)
{
    vec3 normal = vec3(0,0,0);
    float scale = 1.0/sqrt(pow(sinh(mu),2) + pow(sin(nu),2));
    normal.x = scale*sinh(mu)*cos(nu)*cos(phi);
    normal.y = scale*sinh(mu)*cos(nu)*sin(phi);
    normal.z = scale*cosh(mu)*sin(nu);
    return normal;
}

vec3 getWarpMap(in vec2 screenCoords)
{
    float mu = atanh(ba); // the mu corresponding to input axial ratio
    float a = R / cosh(mu); // invert (a cosh mu = semimajor axis) to get 'a' parameter

    vec3 warp = vec3(0, 0, 1);

    float intensity = 1.0;

    float cpix = 0.5;
    // coming out of the projector, pixels to angles
    float a1 = beam * (screenCoords.x - 0.5);  // x direction angle
    float a2 = gamma *screenCoords.y; // y direction angle
    // ray in physical space
    //a1 = a1
    a2 += beta;
    // Does the ray intersect with oblate spheroid?
    // Max distance to consider is v.   Min is v-R.
    // 1. check the max to toss out clean misses.
    float x1 = v * sin(a1);
    float x2 = v * sin(a2);
    // outside/inside parameter oi
    // To sphere-centered origin: x = (v - dd) ; y = x1 ; z = x2
    float mu1,nu1,phi1;
    oblate(a,0.0,x1,x2, mu1, nu1, phi1);  // cartesian to oblate-spheroid coords
	                                      // mu is a generalized r
										  // nu is a generalized theta (polar coord)
										  // phi is the same as regular spherical phi

    if (mu1 > mu)
    {
        intensity = 0;
    }

    // bisect to a tolerable precision
    float tol = 1.0e-5;
    float left = v;
    float right = v-R;
    float stat = 1000.0;
    while (stat > tol)
    {
        float mid = 0.5*(left + right);
        float x1 = mid * sin(a1);
        float x2 = mid * sin(a2);
        oblate(a,v-mid,x1,x2,mu1,nu1,phi1);
        // having gone to the trouble to use oblate coords, test is easy
        if (mu1 < mu)
        {
            stat = (left - mid) / R;
            left = mid;
        }
        else
        {
            stat = (mid - right) / R;
            right = mid;
        }
    }

    // still considering one "successful" ray
    vec3 location = cartesian(a,mu1,nu1,phi1);
    vec3 normal = onormal(mu1,nu1,phi1);

    vec3 svec = normalize(location * vec3(1, -1, -1));
    float constant = 2.0 * dot(normal, svec);
    vec3 rvec = constant * normal - svec;

    float size = length(rvec);
    // track the outbound ray to the dome.
    // Apply a tilt of alpha about the origin of the mirror
    float rtmp = length(location.xy);
    float thet = atan(location.z,location.x);
    thet += alpha; // apply tilt (y coordinate is unchanged)
    location.x = rtmp*cos(thet);
    location.z = rtmp*sin(thet);
    float rtiny = length(rvec.xz);
    thet = atan(rvec.z,rvec.x);
    thet += alpha; // tilt reflected ray
    rvec.x = rtiny*cos(thet);
    rvec.z = rtiny*sin(thet);
    // go to dome-center for the origin of the coordinate system
    location.x -= M;
    location.z -= H;
    
    // Test a vertical travel of domebottomheight = H - z
    float rzz = (-location.z)/rvec.z;

    vec3 location1 = location + rzz * rvec;

    rtmp = length(location1);
    if (rvec.z < 0.0 || rtmp > S)   // trap rays that trend downward or scream off
    {
        intensity = 0;
		warp.x = 1.0;     // 4 lines by Dad July 2 - trying trap this error
		warp.y = 1.0;
		warp.z = intensity;
		return warp;
    }
        
    // proceed by bisection to find Alt/Az on dome
    tol = 1.0e-5;
    left = rzz;
    right = 3.0*S;
    stat = 1000.0;
    while (stat > tol)
    {
        float mid = 0.5*(left + right);
        location1 = location + mid * rvec;

        if (length(location1) < S)
        {
            stat = (mid - left) / S;
            left = mid;
        }
        else
        {
            stat = (right - mid) / S;
            right = mid;
        }
    }

    // results
    float polarAngle = acos(location1.z/S); // polar angle (range 0 to pi/2)
    float alt = a90 - polarAngle;       // dome coordinate "altitude"
    float azi = atan(location1.y,location1.x); // dome coordinate "azimuth"

    float uu = polarAngle*cos(azi+phaseangle);
    float vv = polarAngle*sin(azi+phaseangle);

    uu = uu*0.5/a90 + 0.5;
    vv = vv*0.5/a90 + 0.5;

    warp.x = uu;
    warp.y = vv;
    warp.z = intensity;

    return warp;
}

void main()
{
    vec3 warp = getWarpMap(UV);
    if (renderWarp) {
        color = vec4(warp, 1.0);
    }
    else {
        color = vec4(texture(texSampler, warp.rg).rgb * warp.b, 1.0);
    }
}
